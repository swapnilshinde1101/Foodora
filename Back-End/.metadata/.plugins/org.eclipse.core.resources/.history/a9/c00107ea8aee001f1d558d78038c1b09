package com.foodordering.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.foodordering.model.Address;
import com.foodordering.model.Cart;
import com.foodordering.model.CartItem;
import com.foodordering.model.Order;
import com.foodordering.model.OrderItem;
import com.foodordering.model.Restaurant;
import com.foodordering.model.User;
import com.foodordering.repository.AddressRepository;
import com.foodordering.repository.OrderRepository;
import com.foodordering.repository.OrderitemRepository;
import com.foodordering.repository.RestaurantRepository;
import com.foodordering.repository.UserRepository;
import com.foodordering.request.OrderRequest;

@Service
public class OrderServiceImp  implements OrderService{
	
	@Autowired
	private OrderRepository orderRepository;
	
	@Autowired
	private OrderitemRepository orderitemRepository;
	
	@Autowired
	private AddressRepository addressRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RestaurantRepository restaurantRepository;
	
	@Autowired
	private RestaurantService restaurantService;
	
	@Autowired
	private CartService cartService;

	
	
//	@Override
//	public Order createOrder(OrderRequest order, User user) throws Exception{
//		Address shippAddress=order.getDeliverAddress();
//		
//		Address savedAddress=addressRepository.save(shippAddress);
//		
//		if(!user.getAddresses().contains(savedAddress)) {
//			user.getAddresses().add(savedAddress);
//			userRepository.save(user);
//		}
//		
//		Restaurant restaurant=restaurantService.findRestaurantById(order.getRestaurantId());
//		
//		Order createdOrder=new Order();
//		createdOrder.setCustomer(user);
//		createdOrder.setCreatedAt(new Date());
//		createdOrder.setOrderStatus("PENDING");
//		createdOrder.setDeliveryAddress(savedAddress);
//		createdOrder.setRestaurant(restaurant);
//		
//		Cart cart=cartService.findCartByUserId(user.getId());
//		
//		List<OrderItem> orderItems=new ArrayList<>();
//		for(CartItem cartItem:cart.getItems()) {
//			
//			OrderItem orderItem=new OrderItem();
//			orderItem.setFood(cartItem.getFood());
//			orderItem.setIngredients(cartItem.getIngredients());
//			orderItem.setQuantity(cartItem.getQuantity());
//			orderItem.setTotalPrice(cartItem.getTotalPrice());
//			
//			OrderItem savedOrderItem=orderitemRepository.save(orderItem);
//			orderItems.add(savedOrderItem);
//		}
//		double totalPrice=cartService.calculateCartTotals(cart);
//		createdOrder.setItems(orderItems);
//		createdOrder.setTotalPrice(totalPrice);
//		
//		Order savedOrder=orderRepository.save(createdOrder);
//		restaurant.getOrders().add(savedOrder);
//		
//		return createdOrder;
//	}
	@Override
	public Order createOrder(OrderRequest order, User user) throws Exception {
	    System.out.println("Received order request: " + order);
	    System.out.println("User: " + user.getEmail());

	    Address shippAddress = order.getDeliverAddress();
	    System.out.println("Shipping Address: " + shippAddress);

	    Address savedAddress = addressRepository.save(shippAddress);

	    if (!user.getAddresses().contains(savedAddress)) {
	        user.getAddresses().add(savedAddress);
	        userRepository.save(user);
	    }

	    Restaurant restaurant = restaurantService.findRestaurantById(order.getRestaurantId());
	    System.out.println("Restaurant: " + restaurant.getName());

	    Order createdOrder = new Order();
	    createdOrder.setCustomer(user);
	    createdOrder.setCreatedAt(new Date());
	    createdOrder.setOrderStatus("PENDING");
	    createdOrder.setDeliveryAddress(savedAddress);
	    createdOrder.setRestaurant(restaurant);

	    Cart cart = cartService.findCartByUserId(user.getId());
	    System.out.println("Cart Items: " + cart.getItems());

	    List<OrderItem> orderItems = new ArrayList<>();
	    for (CartItem cartItem : cart.getItems()) {
	        OrderItem orderItem = new OrderItem();
	        orderItem.setFood(cartItem.getFood());
	        orderItem.setIngredients(cartItem.getIngredients());
	        orderItem.setQuantity(cartItem.getQuantity());
	        orderItem.setTotalPrice(cartItem.getTotalPrice());

	        OrderItem savedOrderItem = orderitemRepository.save(orderItem);
	        orderItems.add(savedOrderItem);
	    }

	    double totalPrice = cartService.calculateCartTotals(cart);
	    createdOrder.setItems(orderItems);
	    createdOrder.setTotalPrice(totalPrice);

	    Order savedOrder = orderRepository.save(createdOrder);
	    restaurant.getOrders().add(savedOrder);

	    System.out.println("Order Created Successfully: " + savedOrder);
	    return createdOrder;
	}


	@Override
	public Order updateOrder(Long orderId, String orderStatus) throws Exception {
		Order order=findOrderById(orderId);
		if(orderStatus.equals("OUT_FOR_DELIVERY")||orderStatus.equals("DELIVERED")||
				orderStatus.equals("COMPLETED")||orderStatus.equals("PENDING")) {
			
			order.setOrderStatus(orderStatus);
			return orderRepository.save(order);
		}
		throw new Exception("Please select a valid order status");
	}

	@Override
	public void calcelOrder(Long orderId) throws Exception {
		Order order=findOrderById(orderId);
		orderRepository.deleteById(orderId);
		
	}

	@Override
	public List<Order> getUserOrder(Long userId) throws Exception {
		
		return orderRepository.findByCustomerId(userId);
		
	}

	@Override
	public List<Order> getRestaurantOrder(Long restaurantId, String orderStatus) throws Exception {
		List<Order> orders= orderRepository.findByRestaurantId(restaurantId);
		if(orderStatus!=null) {
			orders=orders.stream().filter(order ->
			        order.getOrderStatus().equals(orderStatus)).collect(Collectors.toList());
		}
		return orders;
	}

	@Override
	public Order findOrderById(Long orderId) throws Exception {
		Optional<Order> optionalOrder=orderRepository.findById(orderId);
		if(optionalOrder.isEmpty()) {
			throw new Exception("order not found");
		}
		return optionalOrder.get();
	}

}
